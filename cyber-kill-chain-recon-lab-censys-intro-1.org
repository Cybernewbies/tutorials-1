#+TITLE: Recon Lab: Censys.io
#+DATE: Introduction
#+AUTHOR: Zach Roof
#+OPTIONS: num:nil toc:nil
#+OPTIONS: reveal_center:nil reveal_control:t width:100% height:100%
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_slide_number:"c"
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h3>%d<h3>"
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil reveal_single_file:nil
#+REVEAL_HLEVEL: 1
#+REVEAL_MARGIN: 0
#+REVEAL_MIN_SCALE: 1
#+REVEAL_MAX_SCALE: 1
#+REVEAL_ROOT: file:///Users/zachroof/repos/sts-reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: laravel
#+REVEAL_PLUGINS: notes
#+REVEAL_EXTRA_CSS: file:///Users/zachroof/repos/weekly-sts-in-prog/local.css
# TODO FT:Security-Controls, nmap
** General Information (1/2)
# *** Title:
# Recon. Lab - Censys.io - Intro.

# *** Desc.
# Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!

# From a high-level, in this tutorial we investigate:
# 1) The Censys internet crawler
# 2) The search functionalities

# Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

# Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it.

# *** Keywords:
# cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance

#+ATTR_REVEAL: :frag (appear)
- What is Censys?
  - Censys is a search engine that allows computer scientists to ask questions
    about the devices and networks that compose the Internet. Driven by
    Internet-wide scanning, Censys lets researchers find specific hosts and
    create aggregate reports on how devices, websites, and certificates are
    configured and deployed.
- Maintained by computer scientists at
  - University Of Michigan
  - University of Illinois Urbana-Champaign

** General Information (2/2)
#+ATTR_REVEAL: :frag (appear)
- Tutorial scope
  - High-level overview of features
  - Upcoming tutorials will show granular examples
- Level: Beginner
- Additional help
  + Recon Intro

** Crawler
#+ATTR_REVEAL: :frag (appear)
+ Crawls the entire public IPv4 space
  + [[https://en.wikipedia.org/wiki/Private_network][Private IP ranges]]
  + Devices/Protocols
    - Telnet, SMTP, DNS, HTTP, Siemens S7, POP3, IMAP, HTTPS, SMTPS, MODBUS,
      IMAPS, POP3S, UPnP, Niagara Fox, CWMP, DNP3, and BACnet
      + Siemens S7
        - Helps control water, energy, waste, and weapon systems

** Search (1/2)
# *** Title:
#  Recon. Lab - Censys.io - Intro. (Part 2)

# *** Keywords:
# cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance

# *** Desc.
# Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!

# From a high-level, in this tutorial we investigate:
# 1) Censys' search functionalities

# Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

# Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it.
#+ATTR_REVEAL: :frag (appear)
- Web interface search
  - Allows full-text search of Censys findings
    - Includes HTTP body
      - Old Javascript libraries?
- Elasticsearch regex [[https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax][syntax]]
  - Elasticsearch
    - Very powerful search engine
- Boolean Logic
  - Includes boosting
- Ex: ~(/.*hackthissite.*/) AND (80.http.get.body:/.*javascript.*/)~
  - [[https://censys.io/ipv4?q=%2528%252F.*hackthissite.*%252F%2529+AND+%252880.http.get.body%253A%252F.*javascript.*%252F%2529][Link]]

** Search (2/2)
#+ATTR_REVEAL: :frag (appear)
- Ranges
  - Including CIDR blocks
- Public [[https://censys.io/api][REST Api]]
  - [[https://github.com/censys/censys-python][Python Client]]
- Researchers given SQL access

** Datasets: IPv4 and Alexa Top Million
# ***  Title:
# Recon. Lab - Censys.io - Intro. (Part 3)

# *** Desc.
# Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!

# From a high-level, in this tutorial we investigate:
# 1) Censys' datasets: IPv4, Alexa Top Million, X.509 Certificates

# Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

# Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it.

# *** Keywords:
# cybersecurity, ethical hacking, infosec, information security, hacking,
# securing the stack, sts, censys.io, reconnaissance, IPv4, Alexa Top Million,
# X.509, Certificate

#+ATTR_REVEAL: :frag (appear)
+ IPv4 Address Space
  - 1 full scan a week (minimum)
  - Daily snapshots
+ Alexa Top Million Domains
  - Full daily scan
  - Additional DNS data compared to IPv4 scan
    - SPF records?
    - AXFR support?

** Datasets: X.509 Certificates (1/2)
#+ATTR_REVEAL: :frag (appear)
- Certificates that are encountered during
  - Any preexisting scan
  - Syncing with the [[https://www.certificate-transparency.org][certificate transparency logs]] (CTL)
    - Contributors to the CTL
      - Google's crawlers
      - Other CAs
    - [[https://github.com/censys/ctsync-daemon][ctsync-daemon]]
      - As of this tutorial, daemon seems to pull but not push to CTL

** Datasets: X.509 Certificates (2/2)
#+BEGIN_SRC sh :results silent :exports none :noweb yes
  export YOUTUBE_BASE=/Users/zachroof/repos/youtube-upload
  mkdir -p ${YOUTUBE_BASE}/current
  mkdir -p ${YOUTUBE_BASE}/old

  $(youtube-upload \
      --title="Recon. Lab - Censys.io - Intro. (Part 5)" \
      --description="Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!
  (Click SHOW MORE for more information...)
  From a high-level, in this tutorial we investigate:
  1) Censys' download/aggregation functionality

  Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

  Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it." \
      --category="Science & Technology" \
      --tags="cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance" \
      --default-language="en" \
      --default-audio-language="en" \
      --credentials-file=${YOUTUBE_BASE}/my_credentials.json \
      --client-secrets=${YOUTUBE_BASE}/client_secrets.json \
      --playlist "Recon. Lab: Censys.io" \
      ${YOUTUBE_BASE}/current/current.mov && \
   mv ${YOUTUBE_BASE}/current/current.mov ${YOUTUBE_BASE}/old/${RANDOM}.mov) &
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
- Parse certificate fields and annotate with metadata
  + Ex: ~(tags: "untrusted") AND (parsed.extensions.subject_alt_name.dns_names: /.*hackthissite.org/)~
  + ~untrusted~ was never trusted
  + ~expired~ was once trusted
    + [[https://censys.io/certificates?q=(tags:%2520%2522untrusted%2522)%2520AND%2520(parsed.extensions.subject_alt_name.dns_names:%2520/.*hackthissite.org/)][Link]]
    + Recon for dev, legacy environments

** Download/Scan Information
#+ATTR_REVEAL: :frag (appear)
# TODO See if this is available for all datasets
- Downloadable [[https://censys.io/data][raw data]]
  - Witness how a host/network has changed over time
  - Additional data at scan.io
- Timestamps
  + Overarching dataset
    - Ex: [[https://censys.io/data/80-http-get-full_ipv4/historical][IPv4 Data]]
  + Within the dataset
    - ~updated_at~

** Aggregation Feature: View On Map
#+ATTR_REVEAL: :frag (appear)
+ Accessed through the ~Tools~ tab
+ [[https://censys.io/ipv4/map?q=/.*hackthissite.*/][Ex.]]
+ Not available for every dataset
  + Ex: Certificate dataset


** Aggregation Feature: View Report
#+BEGIN_SRC sh :results silent :exports none :noweb yes
  export YOUTUBE_BASE=/Users/zachroof/repos/youtube-upload
  mkdir -p ${YOUTUBE_BASE}/current
  mkdir -p ${YOUTUBE_BASE}/old

  $(youtube-upload \
      --title="Recon. Lab - Censys.io - Intro. (Part 6)" \
      --description="Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!
  (Click SHOW MORE for more information...)
  From a high-level, in this tutorial we investigate:
  1) A live demo on how HTTP Headers can be misconfigured
  2) How HTTP Headers work, specifically HTTP Strict Transport Layer Security (HSTS)
  3) Censys' Reporting Functionality

  Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

  Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it." \
      --category="Science & Technology" \
      --tags="cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance, hack this site, HTTP Headers, HTTP Strict Transport Layer Security, HSTS" \
      --default-language="en" \
      --default-audio-language="en" \
      --credentials-file=${YOUTUBE_BASE}/my_credentials.json \
      --client-secrets=${YOUTUBE_BASE}/client_secrets.json \
      --playlist "Recon. Lab: Censys.io" \
      ${YOUTUBE_BASE}/current/current.mov && \
   mv ${YOUTUBE_BASE}/current/current.mov ${YOUTUBE_BASE}/old/${RANDOM}.mov) &
#+END_SRC
+ Summary of findings for [[https://censys.io/ipv4/report?q=%252F.%252Ahackthissite.%252A%252F][specific search fields]]
+ Accessed through the ~Tools~ tab
+ Available for all datasets
+ Find available aggregation fields within the help section
  + Ex: https://censys.io/ipv4/help
    + Click on ~Data Definitions~
    + Ex. Search: ~header~
    + We'll focus on the security related HTTP Headers

** HTTP Header Digression
+ HTTP Headers are the metadata that's attached to HTTP Requests/Responses
+ Certain HTTP Headers have key security functionality
+ Ex: ~curl -v hackthissite.org~
  + The server's HTTP headers can instruct the browser to enable certain
    security features
+ In the upcoming slides we'll investigate
  + A few common vulnerabilities within web applications
  + The HTTP Headers that mitigate these vulnerabilities
  + A hackthissite search that looks for misconfigured HTTP Headers

** Aggregation Feature: View Report
+ Summary of findings for [[https://censys.io/ipv4/report?q=%252F.%252Ahackthissite.%252A%252F][specific search fields]]
+ Accessed through the ~Tools~ tab
+ Available for all datasets
+ Find available aggregation fields within the help section
  + Ex: https://censys.io/ipv4/help
    + Click on ~Data Definitions~
    + Ex. Search: ~header~
    + We'll focus on the security related HTTP Headers

** HTTP Header Digression
+ HTTP Headers are the metadata that's attached to HTTP Requests/Responses
+ Certain HTTP Headers have key security functionality
+ Ex: ~curl -v hackthissite.org~
  + The server's HTTP headers can instruct the browser to enable certain
    security features
+ In the upcoming slides we'll investigate
  + A few common vulnerabilities within web applications
  + The HTTP Headers that mitigate these vulnerabilities
  + A hackthissite search that looks for misconfigured HTTP Headers

** Potential Questions About Last Tutorial
#+BEGIN_SRC sh :results silent :exports none :noweb yes
  export YOUTUBE_BASE=/Users/zachroof/repos/youtube-upload
  mkdir -p ${YOUTUBE_BASE}/current
  mkdir -p ${YOUTUBE_BASE}/old

  $(youtube-upload \
      --title="Recon. Lab - Censys.io - Intro. (Part 7)" \
      --description="Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!
  (Click SHOW MORE for more information...)
  From a high-level, in this tutorial we investigate:
  1) Recon Mindset: The why/where of HTTP Header misconfiguration

  Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

  Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it." \
      --category="Science & Technology" \
      --tags="cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance, hack this site, HTTP Headers, HTTP Strict Transport Layer Security, HSTS" \
      --default-language="en" \
      --default-audio-language="en" \
      --credentials-file=${YOUTUBE_BASE}/my_credentials.json \
      --client-secrets=${YOUTUBE_BASE}/client_secrets.json \
      --playlist "Recon. Lab: Censys.io" \
      ${YOUTUBE_BASE}/current/current.mov && \
   mv ${YOUTUBE_BASE}/current/current.mov ${YOUTUBE_BASE}/old/${RANDOM}.mov) &
#+END_SRC
+ Will touch upon HSTS preload list to answer potential questions about the last tutorial
  + The answers of these questions will be pivotal to understanding
    + Recon
    + The "why" behind using Censys to query HTTP Headers

** HSTS Preload List
+ What is the preload list?
  + Comprised of websites that opt-in to forcing HTTPS over every connection
  + This list is hard-coded into browsers, so a HTTP request to a website can
    NEVER occur
    + Ex: Chrome Dev Tools ~307 Redirect~
  + Chromium project maintains the "master" preload list
    + Most major browsers inherit from this list

** General HSTS Questions
+ ~Strict-Transport-Security: max-age=31536000; includeSubdomains; preload~
+ What happens if I dont use the preload list but I set the ~Strict-Transport-Security~ header?
  + The browser wont force HTTPS on the initial request
    + But after the browser receives the header in the response, it will force HTTPS on all subsequent requests
    + The future duration is governed by the ~max-age~
    + The domain scope is governed by ~includeSubdomains~
+ How do I know if a site is on the preload list?
  + chrome://net-internals
  + Recon: Signals more mature security posture

** Recap Of Issues Found In Last Tutorial
+ We saw how hackthissite is leveraging HSTS to enforce encryption
  + I.e., not doing true server side validation
  + This led to an unencrypted connection
  + Given ~PHPSESSID~'s lack of ~Secure~ flag
    + The session could be sent over HTTP
    + Unreliable ~Secure~ flag behavior
    + Ex: Show in browser
+ Server Side validation Ex:
  + ~curl -v http://accounts.google.com/SignUp~
  + Ideally, should have this in addition to HSTS headers

** HSTS Security Question
+ Q: hackthissite is on the ~preload~ list, why shouldn't we offload the validation work
  to the browser? To do otherwise would be a waste of server resources.
+ Whats wrong with this question?
#+ATTR_REVEAL: :frag (appear)
+ Regarding the preload list
  + "Note that new entries are hard-coded into the Chrome source code and can take
    several months before they reach the stable version."
    + Found on https://hstspreload.org/

** HSTS Security Question (Part 2)
+ "Offload tasks to a browser/client"
  + Alarm!  This is an untrusted environment
    + Browser only validation is a common practice
+ Recon mindset: What are the industry trends?
  + Cloud
    + Amazon's SDKs allow direct calls to databases
    + Pushes validation to browser through HTTP headers
  + General
    + Notice the browser taking on the more of the workload

** Bringing it all together
#+BEGIN_SRC sh :results silent :exports none :noweb yes
  export YOUTUBE_BASE=/Users/zachroof/repos/youtube-upload
  export TITLE="Recon. Lab - Censys.io - Intro. (Part 8)"
  mkdir -p ${YOUTUBE_BASE}/current
  mkdir -p ${YOUTUBE_BASE}/old

  $(youtube-upload \
      --title=${YOUTUBE_BASE} \
      --description="Lets learn about Censys.io, a brilliant internet wide scanner with an extremely powerful search engine.  Take your recon to the next level!
  (Click SHOW MORE for more information...)
  From a high-level, in this tutorial we investigate:
  1) How to leverage Censys to find HTTP Header misconfiguration
  2) Search Operators: AND, NOT
  3) Why git.hackthissite.org would be a big target for hackers

  Series Notes: https://github.com/zachroof/sts-tutorials/blob/master/cyber-kill-chain-recon-lab-censys-intro-1.org

  Limit of Liability/Disclaimer of Warranty: The information in this site is distributed on an “As Is” basis, without warranty. While every precaution has been taken in the preparation of this work, the author shall NOT have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it." \
      --category="Science & Technology" \
      --tags="cybersecurity, ethical hacking, infosec, information security, hacking, securing the stack, sts, censys.io, reconnaissance, hack this site, HTTP Headers, HTTP Strict Transport Layer Security, HSTS" \
      --default-language="en" \
      --default-audio-language="en" \
      --credentials-file=${YOUTUBE_BASE}/my_credentials.json \
      --client-secrets=${YOUTUBE_BASE}/client_secrets.json \
      --playlist "Recon. Lab: Censys.io" \
      ${YOUTUBE_BASE}/current/current.mov && \
   mv ${YOUTUBE_BASE}/current/current.mov ${YOUTUBE_BASE}/old/${TITLE}.mov) &
#+END_SRC
+ Given the browser's increasing role in "security" and overall workload
  + Focus your searches on common sources of browser misconfiguration
    + HTTP Header misconfiguration
    + Leverage the aggregation tool to easily find discrepancies/unusual behavior

** HSTS Report
+ Aggregate based on HSTS headers
+ Ex Query: ~/.*hackthissite.*/~
  + [[https://censys.io/ipv4/report?q=%2528%252F.*hackthissite.*%252F%2529&field=80.http.get.headers.strict_transport_security.raw&max_buckets=][Aggregation report]]
  + Results
    + Different headers could mean different webservers
    + ~max-age=31536000~
      + no ~preload~
      + no ~includeSubdomains~
      + Could those subdomains have faulty encryption?
    + Note ~count~ (65) vs. ~nonnull_count~ (45)

** Find Domains That Dont Leverage HSTS
+ ~(not 80.http.get.headers.strict_transport_security:/.*max.*/) and (/.*hackthissite.*/)~
  + [[https://censys.io/ipv4?q=%2528not+80.http.get.headers.strict_transport_security%253A%252F.*max.*%252F%2529+and+%2528%252F.*hackthissite.*%252F%2529][Ex.]]
  + Simulate null search through UI
  + ~not~ and ~()~
  + Will only pick up ip addresses and the correlated domain, not individual routes
    + http://www.hackthissite.org/pages/errors/404.php
    + Censys is a compliment, not the solution
  + Search results
    + Notice ~Site Not Found~
    + Lack of headers finds abnormal situations

** git.hackthissite.org
+ Why would hackers target this?
  #+ATTR_REVEAL: :frag (appear)
  + git
    + Intellectual property
    + Wikis can contain credentials, on-boarding docs
  + SMTP
    + Mail server
    + Many unauthenticated SMTP servers
    + Social Engineering
      + "Human manipulation"
