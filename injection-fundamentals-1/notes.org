#+TITLE: Injection
#+DATE: Fundamentals
#+AUTHOR: Zach Roof
#+OPTIONS: num:nil toc:nil
#+OPTIONS: reveal_center:nil reveal_control:t width:100% height:100%
#+OPTIONS: reveal_history:t reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_slide_number:"c"
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h3>%d<h3>"
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: auto-id:t
#+REVEAL_HLEVEL: 1
#+REVEAL_MARGIN: 0
#+REVEAL_MIN_SCALE: 1
#+REVEAL_MAX_SCALE: 1
#+REVEAL_ROOT: .
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: sts
#+REVEAL_PLUGINS: notes
#+REVEAL_EXTRA_CSS: css/local.css
#+REVEAL_INIT_SCRIPT: previewLinks: false, fragments:true
* BEFORE RELEASE                                                   :noexport:
  :PROPERTIES:
  :CUSTOM_ID: h-F33CD0CF-52F6-4E52-8641-05726982504F
  :END:
+ Create Errata and Tutorial Notes.  Link to them in slides with the format...
  + Course [[https://sts.wiki/google-hacking-1][Notes]] and [[https://sts.wiki/google-hacking-1-errata][Errata]], Recommendations
    + Make sure these links are in every video's description area
  + Automation
    + For any slide with an errata, do a subheading called "errata"
    + Export these errata to given page that is correlated to the overarching
      tutorial series
+ Confirm level (Beg, Int, Advanced, or All)
+ Create "Base" Tutorial
  + Explains a concept with very concise examples
    + Each example is linked to a distinct, seperate tutorial
      + Seperate tutorial contains
        + A live app that users can exploit a given vulnerability
        + Code examples
        + Must be named "lab"
  + Links to frameworks that can mitigate a given area in (Put in show notes
    area under each tutorial)
    + Javascript
    + Python
    + Java
    + Ruby
    + PHP
  + Make fonts better for code examples.  Look at original css from web.  Fix
    width of code window in css

* Injection: Intro
  :PROPERTIES:
  :CUSTOM_ID: h-624742E6-E748-4F1B-80F7-6560C2C7AD25
  :END:
+ 2017 OWASP Top 10
  + Top 10 security threats to web applications
    + Injection is #1 Risk
+ 80/20 Analysis
+ Help me improve
  + Make PR on errata/notes link
    + All courses resources available below video area
  + I'll reshoot if significant

* Injection: Intro (ASAP Mode)
  :PROPERTIES:
  :CUSTOM_ID: h-55F87165-EFAA-4B6F-AFDE-9DC11EEAF79A
  :END:
#+ATTR_REVEAL: :frag (default)
- Up and running ASAP
  + Watch this tutorial (can also browse notes)
    + Skip
      + The rest of Intro section
      + Labs
    + Read ~Recommendations~ material
      + Includes mitigation recommendations for other programming languages
* Intro                                                           :TOC_1:
  :PROPERTIES:
  :CUSTOM_ID: h-58C02028-EAE0-4FA5-B90E-ACBECD619AF9
  :END:
- [[#injection-intro][Injection: Intro]]
- [[#injection-intro-asap-mode][Injection: Intro (ASAP Mode)]]
- [[#injection-ex-callback-functionality][Injection Ex: Callback Functionality]]
- [[#injection-ex-callback-functionality-exec-context][Injection Ex: Callback Functionality (Exec Context)]]
- [[#injection-ex-callback-functionality-curl-context][Injection Ex: Callback Functionality (Curl Context)]]
- [[#injection-identifying-risks][Injection: Identifying Risks]]
- [[#injection-basic-controls][Injection: Basic Controls]]
- [[#injection-basic-controls-cont][Injection: Basic Controls (CONT.)]]
- [[#injection-compensating-controls-alt-execution][Injection: Compensating Controls (Alt. Execution)]]
- [[#injection-compensating-controls-whitelisting][Injection: Compensating Controls (Whitelisting)]]
- [[#injection-compensating-controls-whitelisting-cont][Injection: Compensating Controls (Whitelisting CONT.)]]
- [[#injection-compensating-controls-character-encoding][Injection: Compensating Controls (Character Encoding)]]
- [[#injection-compensating-controls-detect-character-encoding][Injection: Compensating Controls (Detect Character Encoding)]]
- [[#injection-compensating-controls-special-characters][Injection: Compensating Controls (Special Characters)]]

* Injection Ex: Callback Functionality
  :PROPERTIES:
  :CUSTOM_ID: h-4C29D42A-C347-4934-ADD0-656912762CD9
  :END:
+ Webhook functionality within node.js application
  + Leveraging ~GET~ for simplicity
  #+BEGIN_SRC javascript
  var exec = require('child_process').exec;
  var user_defined_url = "example.com/callback"
  var curl = exec("curl " + user_defined_url);
  curl.stdout.on('data', function(data) {
    console.log(data);
  });
  #+END_SRC
+ Injection is introducing data with malicous intent
  + This data could include unexpected commands that the program runs
  + Main question to ask
    + What malicious data could be /injected/ into ~user_defined_url~?
      + ~exec~ (javascript), ~/bin/sh~, ~curl~ contexts
        + syntax and semantics

* Injection Ex: Callback Functionality (Exec Context)
  :PROPERTIES:
  :CUSTOM_ID: h-DE8297A9-5548-4D83-934A-D2090C632246
  :END:
#+BEGIN_SRC javascript
var exec = require('child_process').exec;
var user_defined_url = "example.com/callback"
var curl = exec("curl " + user_defined_url);
curl.stdout.on('data', function(data) {
  console.log(data);
});
#+END_SRC
+ What input could be inserted into ~user_defined_url~ to exploit the ~exec~ context?
  + Hint: Think about the syntax
  + ~; echo c > /proc/sysrq-trigger~
    + https://unix.stackexchange.com/questions/66197/how-to-cause-kernel-panic-with-a-single-command
    + Many other examples
  + ~;~
    + Syntactical Injection
      + Exploiting "special characters" for a given intrepreter
        + ~exec()~ leverages ~/bin/sh~ on unix based systems

* Injection Ex: Callback Functionality (Curl Context)
  :PROPERTIES:
  :CUSTOM_ID: h-BBB9335B-85DD-41B3-86FC-3A6CE8101A91
  :END:
#+BEGIN_SRC javascript
var exec = require('child_process').exec;
var user_defined_url = "example.com/callback"
var curl = exec("curl " + user_defined_url);
curl.stdout.on('data', function(data) {
  console.log(data);
});
#+END_SRC
+ What input could be inserted into ~user_defined_url~ to exploit the ~curl~ context?
+ ~curl~ context
  + ~user_defined_url~ == ~localhost~
  + ~user_defined_url~ == ~http://169.254.169.254/latest/meta-data/~
    + EC2 metadata
  + Semantic injection
    + Exploiting the underlying /meaning/
      + Not the syntax

* Injection: Identifying Risks
  :PROPERTIES:
  :CUSTOM_ID: h-D2B4807F-E322-46CC-B555-86889F8B4715
  :END:
#+BEGIN_SRC javascript
var exec = require('child_process').exec;
var user_defined_url = "example.com/callback"
var curl = exec("curl " + user_defined_url);
curl.stdout.on('data', function(data) {
  console.log(data);
});
#+END_SRC
+ Items needed for successful attack
  1. Placing untrusted data into an execution context
     + Untrusted
       + User data
         + Includes persisted user data
       + Any data that isn't under your control
       + Data from 3rd party APIs
  2. The command/process has enough privileges to execute the unexpected command/s

* Injection: Basic Controls
  :PROPERTIES:
  :CUSTOM_ID: h-BE7E38EC-CEEB-4189-95FF-32D92239C9D9
  :END:
+ Security Control
  + Countermeasure
+ To the extent possible, don't place untrusted data into an execution context
  + Maybe there's already a mapping within the application which provides the given information
  + Attach data to a user's server-side session object
+ Let your framework be a buffer between you and your user
  + Ex: Leverage a RESTFul API for all CRUD actions
    + Let your framework inform your code what RESTFul method was invoked
    + I.e., don't place user-provided CRUD actions directly into an execution context

* Injection: Basic Controls (CONT.)
  :PROPERTIES:
  :CUSTOM_ID: h-6B61A026-6310-4577-A961-8E1A843FD55F
  :END:
+ Enforce principal of least privilege
  + Server
    + Instantiate all server processes with a highly restricted user
      + Disable write access to code
      + Supplementary tutorial
  + Code
    + Ex: RESTFul Role Based Access Control (RBAC)
      + Each user is assigned a role
      + A given role is restricted to different API routes and RESTFul methods
  + Leverage code analysis tools to flag potential issues
    + IDE Integration
      + Tutorial notes
+ Crash gracefully
  + Especially with risky input

* Injection: Compensating Controls (Alt. Execution)
  :PROPERTIES:
  :CUSTOM_ID: h-8B9E2D56-043A-4E32-82A1-B64AF0708497
  :END:
+ What is a compensating control?
+ Leverage programs that limit the injection risk
  + ~paranoid-request~
    + Helps mitigate injection based risks
      + E.g., ~curl context~ with ~localhost~
    + https://github.com/uber-common/paranoid-request
  + ~execFile~
    #+BEGIN_SRC javascript
    var execFile = require('child_process').execFile;
    var user_defined_url = "example.com/callback"
    execFile("/usr/bin/curl", [user_defined_url]);
    curl.stdout.on('data', function(data) {
      console.log(data);
    });
    #+END_SRC
    + Doesn't directly spawn a shell (interpreter)
    + Invokes ~curl~ as a new process
    + Only leverage if a module like ~paranoid-request~ doesn't exist

* Injection: Compensating Controls (Whitelisting)
  :PROPERTIES:
  :CUSTOM_ID: h-DB9E11CF-028A-400A-83DF-24686705211B
  :END:
+ Whitelist expected application values
  + https://validatejs.org
    + Share validations between client/server (if running node.js)
    + Declare validations at json attribute level
      + Ex: https://validatejs.org/#examples
    + Validators
      + ~inclusion~
        + whitelist
      + ~format~
        + If a predefined list isn't possible possible, validate by regex
      + ~length~
        + Unintended behavior of whitelisted values

* Injection: Compensating Controls (Whitelisting CONT.)
  :PROPERTIES:
  :CUSTOM_ID: h-653DF639-5C55-43E5-A499-3E7463898BE8
  :END:
+ Utilities
  + ~cleanAttributes~
    + Returns an object that only contains the whitelisted attributes. It
      will remove all attributes that have a falsy value in the whitelist.
    + Helps mitigate mass assignment risks
+ Supplementary notes for other validation libraries

* Injection: Compensating Controls (Character Encoding)
  :PROPERTIES:
  :CUSTOM_ID: h-AF3260FC-94C3-442E-85E7-5A6F7C9921AE
  :END:
+ Regex Whitelisting Review
  + Is the regex validating against the correct encoding scheme?
    + Certain estimates place ~UTF-8~ usage at ~90% on the internet (Dec, 2017)
  + Python ex.
   #+BEGIN_SRC python :results output
   "localhost".encode("utf-8")
   "localhost".encode("utf-32")
   #+END_SRC
  + This is why we don't blacklist
+ Assume that ~exec~ or ~curl~ could automatically decode other character sets
  + Could be a way to bypass input validation

* Injection: Compensating Controls (Detect Character Encoding)
  :PROPERTIES:
  :CUSTOM_ID: h-23623995-05EE-4CDE-8A2C-F877E53F0560
  :END:
+ https://github.com/sonicdoe/detect-character-encoding
  + Ex: Accept a string if ~UTF-8~ confidence is greater-than 90%

# * Local Vars
# # Local variables:
# # before-save-hook: org-reveal-export-current-subtree
# # end:


  #+RESULTS:

* Injection: Compensating Controls (Special Characters)
  :PROPERTIES:
  :CUSTOM_ID: h-B9FC60C1-7934-4CB5-B401-67859A64EEDC
  :END:
+ Accepting special characters within the input
  + Must account for escape sequences within all execution contexts
    + ~curl~, ~exec~ (~/bin/sh~ and javascript)
    :CUSTOM_ID: references
   :END:
