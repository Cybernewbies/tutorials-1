# Created 2017-12-15 Fri 21:15
#+OPTIONS: num:nil toc:nil
#+OPTIONS: reveal_center:nil reveal_control:nil width:100% height:100% prop:nil
#+OPTIONS: reveal_history:t reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_slide_number:nil
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h3>%d<h3>"
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: auto-id:t
#+TITLE: Injection
#+DATE: Fundamentals
#+AUTHOR: Zach Roof
#+REVEAL_HLEVEL: 1
#+REVEAL_MARGIN: 0
#+REVEAL_MIN_SCALE: 1
#+REVEAL_MAX_SCALE: 1
#+REVEAL_ROOT: .
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: sts
#+REVEAL_EXTRA_CSS: css/local.css
#+REVEAL_INIT_SCRIPT: previewLinks: false
#+REVEAL_PLUGINS: (classList highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/highlight.js/src/styles/monokai-sublime.css

* TOC                                                                 :TOC_1:
- [[#injection-intro][Injection: Intro]]
- [[#injection-intro-learning-paths][Injection: Intro (Learning Paths)]]
- [[#injection-intro-learning-paths---cont][Injection: Intro (Learning Paths - CONT.)]]
- [[#injection-intro-main-topics-overview][Injection: Intro (Main Topics Overview)]]
- [[#injection-ex-callback-functionality][Injection Ex: Callback Functionality]]
- [[#expolit-me][Expolit Me]]
- [[#injection-ex-callback-functionality-exec-context][Injection Ex: Callback Functionality (Exec Context)]]
- [[#injection-ex-callback-functionality-curl-context][Injection Ex: Callback Functionality (Curl Context)]]
- [[#injection-identifying-risks][Injection: Identifying Risks]]
- [[#injection-basic-controls][Injection: Basic Controls]]
- [[#injection-basic-controls-cont][Injection: Basic Controls (CONT.)]]
- [[#injection-compensating-controls-alt-execution][Injection: Compensating Controls (Alt. Execution)]]
- [[#injection-compensating-controls-whitelisting][Injection: Compensating Controls (Whitelisting)]]
- [[#injection-compensating-controls-whitelisting-cont][Injection: Compensating Controls (Whitelisting CONT.)]]
- [[#injection-compensating-controls-character-encoding][Injection: Compensating Controls (Character Encoding)]]
- [[#injection-compensating-controls-detect-character-encoding][Injection: Compensating Controls (Detect Character Encoding)]]
- [[#injection-compensating-controls-special-characters][Injection: Compensating Controls (Special Characters)]]

* Injection: Intro
- 2017 OWASP Top 10
  - Top 10 security threats to web applications
    - Injection is #1 Risk
- Concise 80/20 Analysis
- Prerequisites: None
- Navigating SecuringTheStack.com
  - All course resources available below video area
  - Help me improve
    - Make PR on links
    - I'll recreate video if significant

* Injection: Intro (Learning Paths)
- Rush Mode
  - All content is useful, but if you're in an extreme rush
    - Watch this tutorial (or browse notes)
    - Recommended section
      - Optional
        - The rest of the Intro section
        - Labs
    - Read ~Recommendations~ material
      - Includes mitigation libraries for multiple programming languages
- Security Beginner
  - Optional
    - The rest of ~Intro~ videos

* Injection: Intro (Learning Paths - CONT.)
- Intermediate/Advanced security knowledge
  - Watch ~Intro (Main Topics Overview)~ (next slide)
    - Based on familiarity
      - Skip directly to the labs
        - Use main tutorial (or notes) as a reference
      - Read ~Recommendations~
* Injection: Intro (Main Topics Overview)
- Injection Ex: Callback Functionality
  - Introduction through pragmatic examples
    - Webhook functionality within node.js
      - Server Side Request Forgery (SSRF)
      - Invoke a kernel panic
- Evaluate injection vulnerabilities through different perspectives
  - Semantic vs Syntactic injection
  - Inspecting execution contexts
  - Filesystem access
    - Could injection force a process to rewrite its own code?
  - Whitelisting strategies
    - ~validate.js~
  - Character encoding injection
- If this is for you, please join me :)
- Labs

* Injection Ex: Callback Functionality
- Webhook functionality within node.js application
  - Leveraging ~GET~ for simplicity
  #+NAME: exec
  #+BEGIN_SRC js
    var exec = require('child_process').exec;
    var user_defined_url = "example.com/callback";
    var curl = exec("curl " + user_defined_url);
    curl.stdout.on('data', function(data) {
      console.log(data);
    });
  #+END_SRC
- Injection is introducing data with malicous intent
  - This data could include unexpected commands that the program runs
  - Main question to ask
    - What malicious data could be /injected/ into ~user_defined_url~?
      - ~exec~ (javascript), ~/bin/sh~, ~curl~ contexts
        - syntax and semantics
* Expolit Me
- Go into ~/src/exex.js~ and try to inject ~user_defined_url~
  - Make the docker container crash
#+BEGIN_SRC sh
  # Must be in the root of the current tutorial
  # Ex ~cd sts-tutorials/injection-fundamentals-1~
  FILE=exec.js EXEC_MODE=nodemon docker-compose -f src/docker-compose.yml up
#+END_SRC

* Injection Ex: Callback Functionality (Exec Context)
#+BEGIN_SRC javascript
  var exec = require('child_process').exec;
  var user_defined_url = "example.com/callback";
  var curl = exec("curl " + user_defined_url);
  curl.stdout.on('data', function(data) {
    console.log(data);
  });
#+END_SRC
- What input could be inserted into ~user_defined_url~ to exploit the ~exec~ context?
  - Hint: Think about the syntax
  - ~; echo c > /proc/sysrq-trigger~
    - https://unix.stackexchange.com/questions/66197/how-to-cause-kernel-panic-with-a-single-command
    - Many other examples
  - ~;~
    - Syntactical Injection
      - Exploiting "special characters" for a given intrepreter
        - ~exec()~ leverages ~/bin/sh~ on unix based systems

* Injection Ex: Callback Functionality (Curl Context)
#+BEGIN_SRC javascript
  var exec = require('child_process').exec;
  var user_defined_url = "example.com/callback";
  var curl = exec("curl " + user_defined_url);
  curl.stdout.on('data', function(data) {
    console.log(data);
  });
#+END_SRC

- What input could be inserted into ~user_defined_url~ to exploit the ~curl~ context?
- ~curl~ context
  - ~user_defined_url~ == ~localhost:27017~
  - ~user_defined_url~ == ~http://169.254.169.254/latest/meta-data/~
    - EC2 metadata
  - Semantic injection
    - Exploiting the underlying /meaning/
      - Not the syntax

* Injection: Identifying Risks
#+BEGIN_SRC javascript
  var exec = require('child_process').exec;
  var user_defined_url = "example.com/callback";
  var curl = exec("curl " + user_defined_url);
  curl.stdout.on('data', function(data) {
    console.log(data);
  });
#+END_SRC
- Items needed for successful attack
  1. Placing untrusted data into an execution context
     - Untrusted
       - User data
         - Includes persisted user data
       - Any data that isn't under your control
       - Data from 3rd party APIs
  2. The command/process has enough privileges to execute the unexpected command/s

* Injection: Basic Controls
- Security Control
  - Countermeasure
- To the extent possible, don't place untrusted data into an execution context
  - Maybe there's already a mapping within the application which provides the given information
  - Attach data to a user's server-side session object
- Let your framework be a buffer between you and your user
  - Ex: Leverage a RESTFul API for all CRUD actions
    - Let your framework inform your code what RESTFul method was invoked
    - I.e., don't place user-provided CRUD actions directly into an execution context

* Injection: Basic Controls (CONT.)
- Enforce principal of least privilege
  - Server
    - Instantiate all server processes with a highly restricted user
      - Disable write access to code
      - Supplementary tutorial
  - Code
    - Ex: RESTFul Role Based Access Control (RBAC)
      - Each user is assigned a role
      - A given role is restricted to different API routes and RESTFul methods
  - Leverage code analysis tools to flag potential issues
    - IDE Integration
      - Tutorial notes
- Crash gracefully
  - Especially with risky input

* Injection: Compensating Controls (Alt. Execution)
- What is a compensating control?
- Leverage programs that limit the injection risk
  - ~paranoid-request~
    - Helps mitigate injection based risks
      - E.g., ~curl context~ with ~localhost~
    - https://github.com/uber-common/paranoid-request
  - ~execFile~
    #+NAME: EXECFILE
    #+BEGIN_SRC javascript
      var execFile = require('child_process').execFile;
      var user_defined_url = "example.com/callback";
      var curl = execFile("/usr/bin/curl", [user_defined_url]);
      curl.stdout.on('data', function(data) {
        console.log(data);
      })
    #+END_SRC
    - Doesn't directly spawn a shell (interpreter)
    - Invokes ~curl~ as a new process
    - Only leverage if a module like ~paranoid-request~ doesn't exist

* Injection: Compensating Controls (Whitelisting)
- Whitelist expected application values
  - https://validatejs.org
    - Share validations between client/server (if running node.js)
    - Declare validations at json attribute level
      - Ex: https://validatejs.org/#examples
    - Validators
      - ~inclusion~
        - whitelist
      - ~format~
        - If a predefined list isn't possible possible, validate by regex
      - ~length~
        - Unintended behavior of whitelisted values

* Injection: Compensating Controls (Whitelisting CONT.)
- Utilities
  - ~cleanAttributes~
    - Returns an object that only contains the whitelisted attributes. It
      will remove all attributes that have a falsy value in the whitelist.
    - Helps mitigate mass assignment risks
- Supplementary notes for other validation libraries

* Injection: Compensating Controls (Character Encoding)
- Regex Whitelisting Review
  - Is the regex validating against the correct encoding scheme?
    - Certain estimates place ~UTF-8~ usage at ~90% on the internet (Dec, 2017)
  - Python ex.
    #+BEGIN_SRC python
      "localhost".encode("utf-8")
      "localhost".encode("utf-32")
    #+END_SRC
  - This is why we don't blacklist
- Assume that ~exec~ or ~curl~ could automatically decode other character sets
  - Could be a way to bypass input validation

* Injection: Compensating Controls (Detect Character Encoding)
- https://github.com/sonicdoe/detect-character-encoding
  - Ex: Accept a string if ~UTF-8~ confidence is greater-than 90%

* Injection: Compensating Controls (Special Characters)
- Accepting special characters within the input
  - Must account for escape sequences within all execution contexts
    - ~curl~, ~exec~ (~/bin/sh~ and javascript)
